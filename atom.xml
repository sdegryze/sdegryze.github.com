<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Learning Learning Blog]]></title>
  <link href="http://sdegryze.github.io/atom.xml" rel="self"/>
  <link href="http://sdegryze.github.io/"/>
  <updated>2013-05-14T21:52:38-07:00</updated>
  <id>http://sdegryze.github.io/</id>
  <author>
    <name><![CDATA[Steven De Gryze]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gradient descent]]></title>
    <link href="http://sdegryze.github.io/blog/2013/05/14/gradient-descent/"/>
    <updated>2013-05-14T21:42:00-07:00</updated>
    <id>http://sdegryze.github.io/blog/2013/05/14/gradient-descent</id>
    <content type="html"><![CDATA[<p>Multiple linear regression</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">shape</span>
</span><span class="line"><span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>  <span class="c"># to representing intercept term</span>
</span><span class="line">
</span><span class="line"><span class="c"># add row with ones to represent intercept terms</span>
</span><span class="line"><span class="n">x_enh</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matrix</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">)))</span>
</span><span class="line"><span class="n">x_enh</span><span class="p">[</span><span class="mi">1</span><span class="p">,:]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">,:]</span>
</span><span class="line">
</span><span class="line"><span class="n">max_iter</span> <span class="o">=</span> <span class="mi">1000</span>
</span><span class="line"><span class="n">theta</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matrix</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="mi">1</span><span class="p">)))</span>
</span><span class="line"><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.1</span>
</span><span class="line"><span class="n">threshold_diff_SSE</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line"><span class="n">last_SSE</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line"><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_iter</span><span class="p">):</span>
</span><span class="line">    <span class="n">resid</span> <span class="o">=</span> <span class="n">theta</span><span class="o">.</span><span class="n">T</span> <span class="o">*</span> <span class="n">x_enh</span> <span class="o">-</span> <span class="n">y</span>
</span><span class="line">
</span><span class="line">    <span class="n">SSE</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">multiply</span><span class="p">(</span><span class="n">resid</span><span class="p">,</span><span class="n">resid</span><span class="p">))</span>
</span><span class="line">    <span class="k">if</span> <span class="n">last_SSE</span><span class="o">-</span><span class="n">SSE</span> <span class="o">&lt;</span> <span class="n">threshold_diff_SSE</span> <span class="ow">and</span> <span class="n">last_SSE</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="k">break</span>
</span><span class="line">
</span><span class="line">    <span class="n">last_SSE</span> <span class="o">=</span> <span class="n">SSE</span>
</span><span class="line">
</span><span class="line">    <span class="c"># np.tile creates a new matrix by copying rows or columns</span>
</span><span class="line">    <span class="n">theta</span> <span class="o">=</span> <span class="n">theta</span> <span class="o">-</span> <span class="n">alpha</span><span class="o">/</span><span class="mi">2</span><span class="o">/</span><span class="n">m</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">multiply</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">tile</span><span class="p">(</span><span class="n">resid</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)),</span> <span class="n">x_enh</span><span class="p">),</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">theta</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sorting]]></title>
    <link href="http://sdegryze.github.io/blog/2013/05/14/sorting/"/>
    <updated>2013-05-14T19:24:00-07:00</updated>
    <id>http://sdegryze.github.io/blog/2013/05/14/sorting</id>
    <content type="html"><![CDATA[<p><strong>Quicksort in Python using list comprehensions but no randomization of pivot</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">qsort</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">list</span> <span class="o">==</span> <span class="p">[]:</span>
</span><span class="line">        <span class="k">return</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">pivot</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">        <span class="n">lesser</span> <span class="o">=</span> <span class="n">qsort</span><span class="p">([</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="p">])</span>
</span><span class="line">        <span class="n">greater</span> <span class="o">=</span> <span class="n">qsort</span><span class="p">([</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="n">pivot</span><span class="p">])</span>
</span><span class="line">        <span class="k">return</span> <span class="n">lesser</span> <span class="o">+</span> <span class="p">[</span><span class="n">pivot</span><span class="p">]</span> <span class="o">+</span> <span class="n">greater</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This implementation works in O(n log n) for randomly sorted lists, but will be very inefficient (O(n^2)) for lists
that are near-sorted. The solution is
<strong>Quicksort with randomization of pivot</strong> Note the use of a wrapper function to copy the list first so that pop does not alter the original list</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">qsort_rand</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">qsort</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="nb">list</span> <span class="o">==</span> <span class="p">[]:</span>
</span><span class="line">            <span class="k">return</span> <span class="p">[]</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">pivot</span> <span class="o">=</span> <span class="nb">list</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">randrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)))</span>
</span><span class="line">            <span class="n">lesser</span> <span class="o">=</span> <span class="n">qsort</span><span class="p">([</span><span class="n">l</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">list</span> <span class="k">if</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="p">])</span>
</span><span class="line">            <span class="n">greater</span> <span class="o">=</span> <span class="n">qsort</span><span class="p">([</span><span class="n">l</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">list</span> <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;=</span> <span class="n">pivot</span><span class="p">])</span>
</span><span class="line">            <span class="k">return</span> <span class="n">lesser</span> <span class="o">+</span> <span class="p">[</span><span class="n">pivot</span><span class="p">]</span> <span class="o">+</span> <span class="n">greater</span>
</span><span class="line">    <span class="k">return</span> <span class="n">qsort</span><span class="p">(</span><span class="nb">list</span><span class="p">[:])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Merge sort</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
</span><span class="line">    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">i</span> <span class="p">,</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">left</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">right</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class="line">            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class="line">            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">mergesort</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="n">lst</span>
</span><span class="line">    <span class="n">middle</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span> <span class="nb">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span> <span class="p">)</span>
</span><span class="line">    <span class="n">left</span> <span class="o">=</span> <span class="n">mergesort</span><span class="p">(</span><span class="n">lst</span><span class="p">[:</span><span class="n">middle</span><span class="p">])</span>
</span><span class="line">    <span class="n">right</span> <span class="o">=</span> <span class="n">mergesort</span><span class="p">(</span><span class="n">lst</span><span class="p">[</span><span class="n">middle</span><span class="p">:])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>RSelect</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">rselect</span><span class="p">(</span><span class="n">sample</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class="line">    <span class="n">pivot</span> <span class="o">=</span> <span class="n">sample</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="n">below</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">sample</span> <span class="k">if</span> <span class="n">s</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="p">]</span>
</span><span class="line">    <span class="n">above</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">sample</span> <span class="k">if</span> <span class="n">s</span> <span class="o">&gt;</span> <span class="n">pivot</span><span class="p">]</span>
</span><span class="line">    <span class="n">len_below</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">below</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">sample</span><span class="p">)</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">above</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="n">len_below</span><span class="p">:</span>
</span><span class="line">    	<span class="k">return</span> <span class="n">rselect</span><span class="p">(</span><span class="n">below</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span><span class="line">    <span class="k">elif</span> <span class="n">n</span> <span class="o">&gt;=</span> <span class="n">j</span><span class="p">:</span>
</span><span class="line">    	<span class="k">return</span> <span class="n">rselect</span><span class="p">(</span><span class="n">above</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="n">j</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">    	<span class="k">return</span> <span class="n">pivot</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementation of K-means in python]]></title>
    <link href="http://sdegryze.github.io/blog/2013/05/03/implementation-of-k-means-in-python/"/>
    <updated>2013-05-03T14:22:00-07:00</updated>
    <id>http://sdegryze.github.io/blog/2013/05/03/implementation-of-k-means-in-python</id>
    <content type="html"><![CDATA[<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># clustering.py contains classes and functions that cluster data points</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">math</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">random</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;The Point class represents points in n-dimensional space&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">coords</span><span class="p">,</span> <span class="n">reference</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">        <span class="sd">&quot;&quot;&quot;Initialize new Points</span>
</span><span class="line"><span class="sd">        :param coords: list of coordinates for this Point</span>
</span><span class="line"><span class="sd">        :param reference: object bound to this Point</span>
</span><span class="line"><span class="sd">        &quot;&quot;&quot;</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">coords</span> <span class="o">=</span> <span class="n">coords</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">coords</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">reference</span> <span class="o">=</span> <span class="n">reference</span>
</span><span class="line">
</span><span class="line">        <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">            <span class="sd">&quot;&quot;&quot;Return a string representation of this Point&quot;&quot;&quot;</span>
</span><span class="line">            <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">coords</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Cluster</span><span class="p">:</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; The Cluster class represents clusters of points in n-dimensional space</span>
</span><span class="line"><span class="sd">    self.points is a list of Points associated with this Cluster</span>
</span><span class="line"><span class="sd">    self.n is the number of dimensions this Cluster&#39;s Points live in</span>
</span><span class="line"><span class="sd">    self.centroid is the sample mean Point of this Cluster</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">points</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">points</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">            <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&quot;Empty cluster is not allowed&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">points</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">n</span> <span class="o">!=</span> <span class="bp">self</span><span class="o">.</span><span class="n">n</span><span class="p">:</span>
</span><span class="line">                <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&quot;Not all points have equal dimension&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">points</span> <span class="o">=</span> <span class="n">points</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">n</span> <span class="o">=</span> <span class="n">points</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">n</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">centroid</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">calculate_centroid</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">points</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">points</span><span class="p">):</span>
</span><span class="line">        <span class="sd">&quot;&quot;&quot;Assign a new list of Points to this Cluster, returns centroid difference&quot;&quot;&quot;</span>
</span><span class="line">        <span class="n">old_centroid</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">centroid</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">points</span> <span class="o">=</span> <span class="n">points</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">centroid</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">calculate_centroid</span><span class="p">()</span>
</span><span class="line">        <span class="k">return</span> <span class="n">get_distance</span><span class="p">(</span><span class="n">old_centroid</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">centroid</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">calculate_centroid</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="sd">&quot;&quot;&quot;Calculate the centroid Point&quot;&quot;&quot;</span>
</span><span class="line">        <span class="k">return</span> <span class="n">Point</span><span class="p">([</span><span class="nb">sum</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">points</span><span class="p">)</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">points</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">n</span><span class="p">)])</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">kmeans</span><span class="p">(</span><span class="n">points</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">cutoff</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">500</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    Return Clusters of Points formed by K-means clustering</span>
</span><span class="line"><span class="sd">    :param points: list of points</span>
</span><span class="line"><span class="sd">    :param k: number of clusters</span>
</span><span class="line"><span class="sd">    :param cutoff: threshold maximum shift under which iteration is stopped</span>
</span><span class="line"><span class="sd">    :param max_iter: maximum number of iterations</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="c"># initialize with randomly sampled points</span>
</span><span class="line">    <span class="n">initial</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">points</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
</span><span class="line">    <span class="n">clusters</span> <span class="o">=</span> <span class="p">[</span><span class="n">Cluster</span><span class="p">([</span><span class="n">p</span><span class="p">])</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">initial</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_iter</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">        <span class="c"># list of lists containing the points closest to each cluster centroid</span>
</span><span class="line">        <span class="n">cluster_point_list</span> <span class="o">=</span> <span class="p">[]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">clusters</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">points</span><span class="p">:</span>
</span><span class="line">            <span class="n">distance_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">get_distance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">this_cluster</span><span class="o">.</span><span class="n">centroid</span><span class="p">)</span> <span class="k">for</span> <span class="n">this_cluster</span> <span class="ow">in</span> <span class="n">clusters</span><span class="p">]</span>
</span><span class="line">            <span class="n">smallest_distance_index</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">distance_list</span><span class="p">),</span> <span class="n">key</span><span class="o">=</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]))[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">            <span class="n">cluster_point_list</span><span class="p">[</span><span class="n">smallest_distance_index</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="n">biggest_shift</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">this_cluster</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">clusters</span><span class="p">):</span>
</span><span class="line">            <span class="n">shift</span> <span class="o">=</span> <span class="n">this_cluster</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">cluster_point_list</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">            <span class="n">biggest_shift</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">biggest_shift</span><span class="p">,</span> <span class="n">shift</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="n">biggest_shift</span> <span class="o">&lt;</span> <span class="n">cutoff</span><span class="p">:</span>
</span><span class="line">            <span class="k">break</span>
</span><span class="line">    <span class="k">return</span> <span class="n">clusters</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">get_distance</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;Get the Euclidean distance between two Points&quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">n</span> <span class="o">!=</span> <span class="n">b</span><span class="o">.</span><span class="n">n</span><span class="p">:</span>
</span><span class="line">        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&quot;ILLEGAL: NON-COMPARABLE POINTS&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="nb">pow</span><span class="p">((</span><span class="n">a</span><span class="o">.</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">b</span><span class="o">.</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">n</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">make_random_point</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">lower</span><span class="p">,</span> <span class="n">upper</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;Create a random Point in n-dimensional space&quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">Point</span><span class="p">([</span><span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="n">lower</span><span class="p">,</span> <span class="n">upper</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)])</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">    <span class="n">num_points</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">cutoff</span><span class="p">,</span> <span class="n">lower</span><span class="p">,</span> <span class="n">upper</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span>
</span><span class="line">
</span><span class="line">    <span class="c"># Create num_points random Points in n-dimensional space</span>
</span><span class="line">    <span class="n">points</span> <span class="o">=</span> <span class="p">[</span><span class="n">make_random_point</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">lower</span><span class="p">,</span> <span class="n">upper</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_points</span><span class="p">)]</span>
</span><span class="line">
</span><span class="line">    <span class="c"># Cluster the points using the K-means algorithm</span>
</span><span class="line">    <span class="n">clusters</span> <span class="o">=</span> <span class="n">kmeans</span><span class="p">(</span><span class="n">points</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">cutoff</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">POINTS:&quot;</span>
</span><span class="line">    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">points</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;P:&quot;</span><span class="p">,</span> <span class="n">p</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">CLUSTERS:&quot;</span>
</span><span class="line">    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">clusters</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;C:&quot;</span><span class="p">,</span> <span class="n">c</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class="line">        <span class="n">main</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My learning learning wishlist]]></title>
    <link href="http://sdegryze.github.io/blog/2013/05/03/my-learning-learning-wishlist/"/>
    <updated>2013-05-03T09:19:00-07:00</updated>
    <id>http://sdegryze.github.io/blog/2013/05/03/my-learning-learning-wishlist</id>
    <content type="html"><![CDATA[<p>Implementation of simple algorithms in Python and R</p>

<ul>
  <li>K-means</li>
  <li>Random forests</li>
  <li>kNN</li>
  <li>Gradient descent</li>
  <li>Neural networks</li>
  <li>Collaborative filtering</li>
</ul>

<p>Essential concepts</p>

<ul>
  <li>Probability</li>
  <li>Combinatorics</li>
  <li>Algorithms</li>
  <li>Learning theory</li>
  <li>Hyperparameter optimization</li>
</ul>

<p>Testing <a href="http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/">ldryman’s LaTEX solution</a>:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
\mbox{Union: } & A\cup B = \{x\mid x\in A \mbox{ or } x\in B\} \\
\mbox{Concatenation: } & A\circ B  = \{xy\mid x\in A \mbox{ and } y\in B\} \\
\mbox{Star: } & A^\star  = \{x_1x_2\ldots x_k \mid  k\geq 0 \mbox{ and each } x_i\in A\} \\
\end{align}
 %]]&gt;</script>
]]></content>
  </entry>
  
</feed>
